name: Deploy Blogify to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Blogapp
    
    steps:
    - name: Checkout latest code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VITE_API_BACKEND_URL: ${{ secrets.VITE_API_BACKEND_URL }}
      run: |
        # Build and push API image
        docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:api-latest ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:api-latest
        
        # Build and push Client image
        docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:client-latest \
          --build-arg VITE_API_BACKEND_URL=$VITE_API_BACKEND_URL \
          ./client
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:client-latest
   

    - name: Update docker-compose.yml
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VITE_API_BACKEND_URL: ${{ secrets.VITE_API_BACKEND_URL }}
      run: |
        cat > docker-compose.yml <<EOL
        services:
          client:
            image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:client-latest
            ports:
              - "5173:80"
            depends_on:
              - api
            environment:
              - VITE_API_BACKEND_URL=\${VITE_API_BACKEND_URL}
            env_file:
              - .env
          api:
            image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:api-latest
            ports:
              - "4000:4000"
            env_file:
              - .env
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
            volumes:
              - ./nginx.conf:/etc/nginx/nginx.conf:ro
            depends_on:
              - client
              - api
        EOL
        echo "Updated docker-compose.yml:"
        cat docker-compose.yml
    

    - name: Prune previous images
      run: |
          retain=3
          images=$(aws ecr list-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageIds[].[imageDigest]' --output text | sort | tail -n +$((retain+1)))
          if [ -n "$images" ]; then
            echo "$images" | xargs -n1 -I{} aws ecr batch-delete-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageDigest={}
          else
            echo "No images to prune."
          fi
          
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VITE_API_BACKEND_URL: ${{ secrets.VITE_API_BACKEND_URL }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml $EC2_USER@$EC2_HOST:~/
        scp -i private_key -o StrictHostKeyChecking=no nginx.conf $EC2_USER@$EC2_HOST:~/
        ssh -i private_key -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST '
         
          # Authenticate with ECR
          #aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY || true


                  
          docker compose pull
          docker compose up -d
          docker system prune -af
        
        '

    - name: Cleanup
      if: always()
      run: rm -f private_key